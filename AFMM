import numpy as np
from Singal_Processing import EmdDecomposing
import os
from File_Saving import write_file, text_save, write_imf_file, write_imf_file1

"""
This is the test demo of the model, please adjust the data path by the user for complete operation
Parameter Description:
    initialization
    :param Audio_signals_path: Input a .wav audio file, or a file format supported by openSMILE
    :param IMFs_wav_path: Temporary save path of the IMF generated by the original signal decomposition
    :param Final_IMFs2wav_path: Output storage address of AFMM (IMF --> .wav)
    :param Final_IMFs_path: Output storage address of AFMM (IMF)
"""

audio_filenames = os.listdir(Audio_signals_path)
count = 1
feature_list = []
Emd = EmdDecomposing()
for index in audio_filenames:
    filepath = os.path.join(Audio_signals_path, index)
    sig_imf = Emd.Processing(filepath)
    sig_imf_row, sig_imf_col = sig_imf.shape
    for j in range(sig_imf_row):
        write_path = write_imf_file1(IMFs_wav_path, sig_imf[j,:], count, j)
        feature_temp = Emd.feature(write_path)
        feature_list.append(feature_temp)
    feature_list2array = np.array(feature_list)
    Nan_judge = np.isnan(feature_list2array)
    Inf_judge = np.isinf(feature_list2array)
    if Nan_judge.any() or Inf_judge.any():
        pass
    else:
        feature_set = np.reshape(feature_list2array, (sig_imf_row, -1))
        class_fea, final_imf = Emd.cluster(feature_set, feature_set.shape[1], sig_imf_col, sig_imf, Final_IMFs_path, index)
        write_imf_file(Final_IMFs2wav_path, final_imf, count, index)
        feature_list = []
        print("complete NO. %d" % count)
        count = count + 1
